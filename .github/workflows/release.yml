name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with v (e.g. v1.0.0)

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required to fetch all history for all tags and branches

    - name: Install Rust, Cargo and rustup
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install MinGW toolchains for Windows targets
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686

    - name: Generate changelog
      id: changelog
      run: |
        CHANGELOG_FILE="RELEASE_NOTES.md"
        CURRENT_TAG=${{ github.ref_name }}
        echo "Current tag: $CURRENT_TAG"

        # Get all tags sorted by committerdate (most recent first)
        SORTED_TAGS=($(git tag --sort=-committerdate))
        PREVIOUS_TAG=""

        # Find the current tag in the sorted list and get the one before it (which is chronologically previous)
        for i in "${!SORTED_TAGS[@]}"; do
          if [[ "${SORTED_TAGS[$i]}" == "$CURRENT_TAG" ]]; then
            if [[ $((i + 1)) -lt ${#SORTED_TAGS[@]} ]]; then
              PREVIOUS_TAG="${SORTED_TAGS[$((i + 1))]}"
              break
            fi
          fi
        done

        echo "Previous tag: $PREVIOUS_TAG. Current tag: $CURRENT_TAG."
        COMMIT_LOG=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG)
        if [ -z "$COMMIT_LOG" ]; then
          COMMIT_LOG="* No new commits since $PREVIOUS_TAG."
        fi
        echo -e "## Changelog ($PREVIOUS_TAG \u2192 $CURRENT_TAG)\n\n$COMMIT_LOG" > $CHANGELOG_FILE
        echo "Generated changelog content:"
        cat $CHANGELOG_FILE
        echo "notes_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT
        false
      shell: bash

    - name: Run build script
      run: "./build-binaries.sh"

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.DEPLOY_TOKEN }}
        files: "target/release_builds/*"
        body_path: ${{ steps.changelog.outputs.notes_file }}
